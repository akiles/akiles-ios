#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef AKILESSDK_SWIFT_H
#define AKILESSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AkilesSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
@class Gadget;
@class Hardware;
@protocol Cancellable;
@class ActionOptions;
@protocol ActionCallback;
@protocol SyncCallback;
@class Card;
@class NSError;
/// The main entry point for the AkilesSDK.
/// This class provides access to all Akiles functionality including session management,
/// device scanning, actions, and card operations. It handles communication with the Akiles API
/// and manages connections to Akiles devices.
/// <h2>Example Usage</h2>
/// \code
/// let akiles = Akiles()
///
/// // Add a session using a token from the Akiles API
/// let sessionId = try await akiles.addSession(token: "your-session-token")
///
/// // Get available devices for the session
/// let gadgets = try await akiles.getGadgets(sessionID: sessionId)
///
/// // Perform an action on a device
/// let options = ActionOptions()
/// let callback = MyActionCallback()
/// await akiles.action(
///     sessionID: sessionId,
///     gadgetID: gadgets[0].id,
///     actionID: gadgets[0].actions[0].id,
///     options: options,
///     callback: callback
/// )
///
/// \endcode
SWIFT_CLASS("_TtC9AkilesSDK6Akiles") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface Akiles : NSObject
/// Initializes the Akiles SDK.
/// The SDK will automatically initialize its internal components and establish
/// connections to required services.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Retrieves all session IDs from the local session store (Objective-C version).
/// This is the Objective-C compatible version of <code>getSessionIDs()</code>.
/// For Swift code, prefer using the async version which provides better error handling.
/// \param completion Completion handler called when the operation finishes
/// <ul>
///   <li>
///     <code>sessionIds</code>: Array of session ID strings, or <code>nil</code> if an error occurred
///   </li>
///   <li>
///     <code>error</code>: Error object if the operation failed, or <code>nil</code> if successful
///   </li>
/// </ul>
///
- (void)getSessionIDs:(void (^ _Nonnull)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
/// Adds a new session to the SDK using a token from the Akiles API (Objective-C version).
/// This is the Objective-C compatible version of <code>addSession(token:)</code>.
/// For Swift code, prefer using the async version which provides better error handling.
/// \param token The session token string obtained from the Akiles API
///
/// \param completion Completion handler called when the operation finishes
/// <ul>
///   <li>
///     <code>sessionId</code>: The unique session ID if successful, or <code>nil</code> if an error occurred
///   </li>
///   <li>
///     <code>error</code>: Error object if the operation failed, or <code>nil</code> if successful
///   </li>
/// </ul>
///
- (void)addSession:(NSString * _Nonnull)token completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Removes a session from the SDK (Objective-C version).
/// This is the Objective-C compatible version of <code>removeSession(id:)</code>.
/// For Swift code, prefer using the async version which provides better error handling.
/// \param id The session ID to remove
///
/// \param completion Completion handler called when the operation finishes
/// <ul>
///   <li>
///     <code>error</code>: Error object if the operation failed, or <code>nil</code> if successful
///   </li>
/// </ul>
///
- (void)removeSession:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Removes all sessions from the SDK (Objective-C version).
/// This is the Objective-C compatible version of <code>removeAllSessions()</code>.
/// For Swift code, prefer using the async version which provides better error handling.
/// \param completion Completion handler called when the operation finishes
/// <ul>
///   <li>
///     <code>error</code>: Error object if the operation failed, or <code>nil</code> if successful
///   </li>
/// </ul>
///
- (void)removeAllSessions:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Refreshes the cached data for a specific session (Objective-C version).
/// This is the Objective-C compatible version of <code>refreshSession(id:)</code>.
/// For Swift code, prefer using the async version which provides better error handling.
/// \param id The session ID to refresh
///
/// \param completion Completion handler called when the operation finishes
/// <ul>
///   <li>
///     <code>error</code>: Error object if the operation failed, or <code>nil</code> if successful
///   </li>
/// </ul>
///
- (void)refreshSession:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Refreshes the cached data for all sessions (Objective-C version).
/// This is the Objective-C compatible version of <code>refreshAllSessions()</code>.
/// For Swift code, prefer using the async version which provides better error handling.
/// \param completion Completion handler called when the operation finishes
/// <ul>
///   <li>
///     <code>error</code>: Error object if the operation failed, or <code>nil</code> if successful
///   </li>
/// </ul>
///
- (void)refreshAllSessions:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Retrieves all Akiles devices (gadgets) accessible by a session (Objective-C version).
/// This is the Objective-C compatible version of <code>getGadgets(sessionID:)</code>.
/// For Swift code, prefer using the async version which provides better error handling.
/// \param sessionID The session ID to query
///
/// \param completion Completion handler called when the operation finishes
/// <ul>
///   <li>
///     <code>gadgets</code>: Array of Gadget objects if successful, or <code>nil</code> if an error occurred
///   </li>
///   <li>
///     <code>error</code>: Error object if the operation failed, or <code>nil</code> if successful
///   </li>
/// </ul>
///
- (void)getGadgets:(NSString * _Nonnull)sessionID completion:(void (^ _Nonnull)(NSArray<Gadget *> * _Nullable, NSError * _Nullable))completion;
/// Retrieves all Akiles devices (hardware) accessible by a session (Objective-C version).
/// This is the Objective-C compatible version of <code>getHardwares(sessionID:)</code>.
/// For Swift code, prefer using the async version which provides better error handling.
/// \param sessionID The session ID to query
///
/// \param completion Completion handler called when the operation finishes
/// <ul>
///   <li>
///     <code>hardwares</code>: Array of Hardware objects if successful, or <code>nil</code> if an error occurred
///   </li>
///   <li>
///     <code>error</code>: Error object if the operation failed, or <code>nil</code> if successful
///   </li>
/// </ul>
///
- (void)getHardwares:(NSString * _Nonnull)sessionID completion:(void (^ _Nonnull)(NSArray<Hardware *> * _Nullable, NSError * _Nullable))completion;
/// Scans for nearby Akiles devices using Bluetooth (Objective-C version).
/// This is the Objective-C compatible version of <code>scan(cb:)</code>.
/// For Swift code, prefer using the async version which provides better error handling.
/// This operation can be cancelled by calling <code>cancel()</code> on the returned object.
/// \param cb Callback function called when an Akiles device is discovered
///
/// \param completion Completion handler called when the scan finishes or fails
/// <ul>
///   <li>
///     <code>error</code>: Error object if the operation failed, or <code>nil</code> if successful
///   </li>
/// </ul>
///
///
/// returns:
/// A <code>Cancellable</code> object that can be used to stop the scan
- (id <Cancellable> _Nonnull)scan:(void (^ _Nonnull)(Hardware * _Nonnull))cb completion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Performs an action on an Akiles device (gadget) (Objective-C version).
/// This is the Objective-C compatible version of <code>action(sessionID:gadgetID:actionID:options:callback:)</code>.
/// For Swift code, prefer using the async version which provides better error handling.
/// This operation can be cancelled by calling <code>cancel()</code> on the returned object.
/// \param sessionID The session ID that has access to the device
///
/// \param gadgetID The unique identifier of the Akiles device
///
/// \param actionID The unique identifier of the action to perform
///
/// \param options Configuration options for the action
///
/// \param callback Callback object to receive status updates and results
///
/// \param completion Completion handler called when the action completes (success or failure)
///
///
/// returns:
/// A <code>Cancellable</code> object that can be used to stop the action
- (id <Cancellable> _Nonnull)action:(NSString * _Nonnull)sessionID gadgetID:(NSString * _Nonnull)gadgetID actionID:(NSString * _Nonnull)actionID options:(ActionOptions * _Nonnull)options callback:(id <ActionCallback> _Nonnull)callback completion:(void (^ _Nonnull)(void))completion SWIFT_WARN_UNUSED_RESULT;
/// Synchronizes the state of an Akiles device (Objective-C version).
/// This is the Objective-C compatible version of <code>sync(sessionID:hardwareID:callback:)</code>.
/// For Swift code, prefer using the async version which provides better error handling.
/// This operation can be cancelled by calling <code>cancel()</code> on the returned object.
/// \param sessionID The session ID that has access to the device
///
/// \param hardwareID The unique identifier of the Akiles device to synchronize
///
/// \param callback Callback object to receive status updates during synchronization
///
/// \param completion Completion handler called when the synchronization finishes
/// <ul>
///   <li>
///     <code>error</code>: Error object if the operation failed, or <code>nil</code> if successful
///   </li>
/// </ul>
///
///
/// returns:
/// A <code>Cancellable</code> object that can be used to stop the synchronization
- (id <Cancellable> _Nonnull)sync:(NSString * _Nonnull)sessionID hardwareID:(NSString * _Nonnull)hardwareID callback:(id <SyncCallback> _Nonnull)callback completion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Scans an NFC card using the device’s NFC reader (Objective-C version).
/// This is the Objective-C compatible version of <code>scanCard()</code>.
/// For Swift code, prefer using the async version which provides better error handling.
/// This operation can be cancelled by calling <code>cancel()</code> on the returned object.
/// \param completion Completion handler called when the scan finishes
/// <ul>
///   <li>
///     <code>card</code>: The scanned Card object if successful, or <code>nil</code> if an error occurred
///   </li>
///   <li>
///     <code>error</code>: Error object if the operation failed, or <code>nil</code> if successful
///   </li>
/// </ul>
///
///
/// returns:
/// A <code>Cancellable</code> object that can be used to stop the scan
- (id <Cancellable> _Nonnull)scanCard:(void (^ _Nonnull)(Card * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Checks if the current device supports NFC card emulation (Objective-C version).
/// This is the Objective-C compatible version of <code>isCardEmulationSupported()</code>.
/// For Swift code, prefer using the async version.
/// \param completion Completion handler called with the support status
/// <ul>
///   <li>
///     <code>isSupported</code>: <code>true</code> if card emulation is supported and available, <code>false</code> otherwise
///   </li>
/// </ul>
///
- (void)isCardEmulationSupported:(void (^ _Nonnull)(BOOL))completion;
/// Checks if the current device supports Bluetooth communication.
/// Bluetooth is used for communicating with nearby Akiles devices for actions
/// and synchronization. Most iOS devices support Bluetooth, but this method
/// can be used to verify availability.
///
/// returns:
/// <code>true</code> if Bluetooth is supported, <code>false</code> otherwise
- (BOOL)isBluetoothSupported SWIFT_WARN_UNUSED_RESULT;
/// Creates a card emulation session and initiates NFC communication.
/// This method sets up the device to act as an NFC card, allowing it to communicate
/// with Akiles devices. The session will remain active until invalidated or an error occurs.
/// \param language Language code for localized user messages (e.g., “en”, “es”)
///
/// \param completion Completion handler called when the session is created or fails
///
- (void)startCardEmulation:(NSString * _Nonnull)language completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion SWIFT_AVAILABILITY(ios,introduced=13.0);
@end

@class NSData;
/// Represents an NFC card that has been scanned.
/// This class provides methods to interact with NFC cards, including checking
/// if they are Akiles-compatible cards and updating them to work with Akiles devices.
SWIFT_CLASS("_TtC9AkilesSDK4Card") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface Card : NSObject
/// Checks if the scanned card is an Akiles-compatible card.
/// This method examines the card’s data to determine if it can be used
/// with Akiles devices. Not all NFC cards are compatible with the Akiles system.
///
/// returns:
/// <code>true</code> if the card is Akiles-compatible, <code>false</code> otherwise
- (BOOL)isAkilesCard SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the unique identifier (UID) of the NFC card.
/// The UID is a unique identifier assigned to each NFC card during manufacturing.
/// This can be used to identify and track specific cards.
///
/// returns:
/// The card’s UID as a Data object containing the raw bytes
- (NSData * _Nonnull)getUid SWIFT_WARN_UNUSED_RESULT;
/// Updates the card to be compatible with Akiles devices (Objective-C version).
/// This is the Objective-C compatible version of <code>update()</code>.
/// For Swift code, prefer using the async version which provides better error handling.
/// \param completion Completion handler called when the operation finishes
/// <ul>
///   <li>
///     <code>error</code>: Error object if the operation failed, or <code>nil</code> if successful
///   </li>
/// </ul>
///
- (void)update:(void (^ _Nonnull)(NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Handling Host Card Emulation (HCE) NFC sessions.
/// This class enables the iOS device to emulate an NFC card, allowing it to communicate
/// with Akiles devices without requiring a physical card. Card emulation is available
/// on iOS 17.4 and later with compatible hardware.
SWIFT_CLASS("_TtC9AkilesSDK14HCECardSession")
@interface HCECardSession : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
